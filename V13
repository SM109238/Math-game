                                                                                                                                                                                                                                                                                                                                                                                                             
from tkinter import *
from tkinter import messagebox
import random
import turtle


#game 
score = 0 #default score number
hits = 0 #default number of target hits
player = None
missile = None
enemies = []
game_running = True
message_label = None
def quit_game():
    turtle.bye() #close the turtle graphics window

def setup_game():
    global player, missile, enemies, score_label, message_label


    #set up the turtle game screen
    screen = turtle.Screen()
    screen.bgcolor("black")
    screen.title("Shooting Game")
    screen.setup(width=600, height=500)
    screen.bgpic("Archery.png")

    screen.register_shape("bow.gif")
    screen.register_shape("target.gif")
    screen.register_shape("arrow.gif")
    

    #set up the player turtle
    
    player = turtle.Turtle()
    player.shape("bow.gif")
    #player.color("white")
    player.penup()
    player.speed(0)
    player.setposition(0, -200)
    player.setheading(90)

    #Set up the missile (hidden by default)
    missile = turtle.Turtle()
    missile.shape("arrow.gif")
    #missile.color("yellow")
    missile.penup()
    missile.speed(0)
    missile.setheading(90)
    missile.shapesize(stretch_wid=0.50, stretch_len=0.50)
    missile.hideturtle()

    for _ in range(1):
        enemy = turtle.Turtle()
        enemy.shape("target.gif")
        enemy.color("red")
        enemy.penup()
        enemy.speed(0)
        x = random.randint(-250, 250)
        y = random.randint(50, 200)
        enemy.setposition(x, y)
        enemies.append(enemy)

    #set up score display
    score_label = turtle.Turtle()
    score_label.speed(0)
    score_label.color("white")
    score_label.penup()
    score_label.hideturtle()
    score_label.goto(-280,-230)
    update_score()

    #set up message display
    message_label = turtle.Turtle()
    message_label.speed(0)
    message_label.color("yellow")
    message_label.penup()
    message_label.hideturtle()
    message_label.goto(0, 0)

    #Keyboard bindings
    turtle.listen()
    turtle.onkey(move_left, "Left")
    turtle.onkey(move_right, "Right")
    turtle.onkey(fire_missile, "space")

def move_left():
    x = player.xcor()
    x -= 15
    if x < -250:
        x = -250
    player.setx(x)

def move_right():
    x = player.xcor()
    x += 15
    if x > 250:
        x = 250
    player.setx(x)

def fire_missile():
    global missile

    if not missile.isvisible():
        missile.setposition(player.xcor(), player.ycor() + 10)
        missile.showturtle()
        move_missile()

def move_missile():
    global missile, score, hits

    y = missile.ycor()
    y += 20
    missile.sety(y)

    #Check for collision with enemy
    for enemy in enemies:
        if missile.distance(enemy) < 20:
            missile.hideturtle()
            enemy.setposition(random.randint(-250, 250), random.randint(50, 200))
            score += 10
            hits += 1
            update_score()
            show_message("Shoot!")
            quit_game()
            return
            


    #check if missile is off the screen
    if y > 250:
        missile.hideturtle()
        show_message("Miss!")
    else:
        try:
            turtle.ontimer(move_missile, 50)
        except turtle.Terminator:
            pass
                      
            
def update_score ():
    global score_label, score, hits
    score_label.clear()
    score_label.write(f"Score: {score} | Enemies Taken Down: {hits}", align="left", font=("Courier", 18, "normal"))

def show_message(msg):
    global message_label
    message_label.clear()
    message_label.write(msg, align="center", font=("Courier", 24, "bold"))
    turtle.ontimer(clear_message, 1000)

def clear_message():
    global message_label
    message_label.clear()

def start_game():
    setup_game()
    turtle.mainloop()


#quit button
def quit():
    main_window.destroy()

#Login entry 
def login():
    username = entry_box1.get()
    password = entry_box4.get()


    if not username:#if the username is not entered and start button is clicked
        error_label.config(text="please fill out this field", fg="red")#error
        return False
    else:
        error_label.config(text=" ", fg="red")#hide error if username is entered

    
    if username != "quizuser1": #if the username is not 'quizuser1'(correct username)
        error_label.config(text="Incorrect username, try again", fg="red")#error
        return False
    else: 
        error_label.config(text=" ", fg="red")#hide error if the correct username is entered
        
    if not password: #if the password is not entered
        error_label2.config(text="please fill out this field", fg="red")#error
        return False
    else:
        error_label2.config(text=" ", fg="red")#hide error if the password is entered
        
    if password != "gameusercode":#if the password is not 'gameusercode'(correct password)
        error_label2.config(text="Incorrect password, try again", fg="red")
        return False
    else:
        error_label2.config(text=" ", fg="red")#hide error if the correct password is entered

    if username == "quizuser1" and password == "gameusercode": #if the correct username and password is entered
        error_label.config(text=" ", fg="red")#hide error if the correct username is entered
        error_label2.config(text=" ", fg="red")#hide error if the correct password is entered
        return True


def save_score_to_file():
    def validate_input(char):
        return char.isalpha()

    def save_score():
        data = score
        # Save the entry to a file
        with open("entries.txt", "a") as file:
            file.write(text + "\n")

    validate_cmd = main_window.register(validate_input)




def complete_window():
    complete = Tk()
    complete.title("Level complete")
    complete.geometry("300x150")
    complete.configure(bg='aquamarine4')

    color3 = 'aquamarine4'
    body = ('Verdana', 15)


    def ok():
        #save_entry()
        ChooseLevelWindow()
        save_score_to_file()
        complete.destroy()
        
        
    #validate_cmd = complete.register(validate_input)
    final_score =  f"Total score: {score}"
    Label(complete, text="level complete!", bg=color3, font=body).grid(row=4, column=3, padx=(10,5), pady=(0,0))
    Label(complete, text="choose another level", bg=color3, font=body).grid(row=5, column=3, padx=(10,5), pady=(0,0))
    Label(complete, text=final_score, bg=color3, font=body).grid(row=6, column=3, padx=(10,5), pady=(0,0))

    Button(complete, text="OK!", command=ok).grid(row=7, column=3, padx=(10,5), pady=(0,0))

    
#choose level window
global ChooseLevelWindow

def ChooseLevelWindow():
    if not login():
        return

    ChooseLevel = Toplevel(main_window)
    ChooseLevel.title("Choose Level")
    ChooseLevel.geometry("200x205")
    ChooseLevel.configure(bg = 'cadet blue')
    
    
    def exit():
        ChooseLevel.destroy()

    

#Easy window
    def Easy_window():
        def exit():
            Easy.destroy()



        Easy = Toplevel(ChooseLevel)
        Easy.title("Easy level")
        Easy.geometry("650x450")
        Easy.configure(bg='aquamarine4')

        color3 = 'aquamarine4'
        body = ('Verdana', 10)
        
        
        Label(Easy, text=entry_box1.get(), bg=color3, font=body).grid(row=1, column=3, padx=(250,5), pady=(0,0))#name
        Button(Easy, text="Quit", command=exit, font=body).grid(row=0, column=4, sticky=W, padx=(200,600), pady=(0,0))#quit button

        question_num = IntVar(value=0)

        def update_question_num():
            if question_num.get() < 5:
                question_num.set(question_num.get() +1)
                
        Label(Easy, text="Question n.o:", bg=color3, font=body).grid(row=3, column=1) #question n.o

        question_num_label = Label(Easy, textvariable=question_num, bg=color3, font=body)
        question_num_label.grid(row=3, column=2)

        Label(Easy, text="L1:Easy", bg=color3, font=body).grid(row=3, column=4, padx=(100,500), pady=(0,1))#Level

        num = [1, 2, 3, 4, 5, 6, 7, 8, 9]  
        def submit(var1):
            body_font = ('Verdana', 10)
            colour1= 'red'
            colour2= 'green'
            if var1.get() == str(resultPLUS()):
                correct = Label(Easy, text="Correct!", font=body_font, bg=colour2)
                correct.place(relx=0.5, rely=0.2)
                start_game()

            else:
                wrong = Label(Easy, text="Wrong!", font=body_font, bg=colour1)
                wrong.place(relx=0.5, rely=0.2)
                entry_box2.delete(0, "end")

        
      
        def try_again():
            if question_num.get() >=5:#stop after 5 questions
                complete_window()
                Easy.destroy()
                return

            
            
            body_font = ('Verdana', 10)
            try_again.num1update = random.choice(num)
            try_again.num2update = random.choice(num)
            try_again.operation = random.choice(['+', '-'])

            if try_again.operation == '+':
                question.config(text=f"{try_again.num1update}+{try_again.num2update}")
            else:
                question.config(text=f"{try_again.num1update}-{try_again.num2update}")

            question.grid(row=8, column=3, padx=(10,3), pady=(0,50))
            space = Label(Easy, text="                 ", font=body_font, bg=color3)
            space.place(relx=0.5, rely=0.2)
            entry_box2.delete(0, "end")
            update_question_num()
            


 
       
        def resultPLUS():
            if try_again.operation == '+':
                return try_again.num1update + try_again.num2update
            else:
                return try_again.num1update - try_again.num2update

        def answer():
            global entry_box2, solving, question

            body_font = ('Verdana', 10)

            question = Label(Easy, text=" ", font=body_font, bg=color3)
            question.grid(row=8, column=3)
            

            entry_box2 = Entry(Easy)
            entry_box2.grid(row=14, column=3, padx=(5,5), pady=(0,50))
            
            submit_button = Button(Easy, text="Submit", command=lambda: submit(entry_box2))
            submit_button.grid(row=16, column=1, padx=(10,3), pady=(0,50))

            try_again_button = Button(Easy, text="Next", command=try_again)
            try_again_button.grid(row=16, column=4, sticky=W, padx=(200,600), pady=(0,0))

            try_again()
        answer()
        
        Easy.mainloop()
        

#Medium window      
    def Medium_window():
        def exit():
            Medium.destroy()
            
        Medium = Toplevel(ChooseLevel)
        Medium.title("Medium level")
        Medium.geometry("650x450")
        Medium.configure(bg = 'aquamarine4')

        color3 = 'aquamarine4'
        body_font = ('Verdana', 10)
        
        Label(Medium, text=entry_box1.get(), bg=color3, font=body_font).grid(row=1, column=3, padx=(250,5), pady=(0,0))
        Button(Medium, text="Quit", command=exit, font=body_font).grid(row=0, column=4, sticky=W, padx=(200,600), pady=(0,0))

        question_num = IntVar(value=0)
        
        def update_question_num():
            if question_num.get() < 5:
                question_num.set(question_num.get()+1)

        question_num_label = Label(Medium, textvariable=question_num, bg=color3, font=body_font)
        question_num_label.grid(row=3, column=2)

        Label(Medium, text="Question n.o:", bg=color3, font=body_font).grid(row=3, column=1) #padx=(100, 200), pady=(12,0))
        Label(Medium, text="L2:Medium", bg=color3, font=body_font).grid(row=3, column=4, padx=(100,500), pady=(0,1))

        num = [1, 2, 3, 4, 5, 6, 7, 8, 9]

        def submit(var1):
            body_font = ('Verdana', 10)
            colour1= 'red'
            colour2= 'green'
            
            if var1.get() == str(result()):
                correct = Label(Medium, text="Correct!", font=body_font, bg=colour2)
                correct.place(relx=0.5, rely=0.2)
                start_game()
            else:
                wrong = Label(Medium, text="Wrong!", font=body_font, bg=colour1)
                wrong.place(relx=0.5, rely=0.2)
                entry_box3.delete(0, "end")

            
        def try_again():
            if question_num.get() >=5: #stop after 5 questions
                complete_window()
                Medium.destroy()
                return
            
            body_font = ('Verdana', 10)
            try_again.num1update = random.choice(num)
            try_again.num2update = random.choice(num)
            try_again.operation = random.choice(['*', '/'])

            if try_again.operation == '*':
                question.config(text=f"{try_again.num1update}×{try_again.num2update}")
            else:
                if try_again.num1update % try_again.num2update !=0:
                    try_again.num1update *= try_again.num2update
                question.config(text=f"{try_again.num1update}÷{try_again.num2update}")

            question.grid(row=8, column=3, padx=(10,3), pady=(0,50))
            space = Label(Medium, text="                 ", font=body_font, bg=color3)
            space.place(relx=0.5, rely=0.2)
            entry_box3.delete(0, "end")
            update_question_num()
            


 
       
        def result():
            if try_again.operation == '*':
                return try_again.num1update * try_again.num2update
            else:
                return try_again.num1update // try_again.num2update

        def answer():
            global entry_box3, solving, question

            body_font = ('Verdana', 10)

            question = Label(Medium, text=" ", font=body_font, bg=color3)
            question.grid(row=8, column=3)
            

            entry_box3 = Entry(Medium)
            entry_box3.grid(row=14, column=3, padx=(5,5), pady=(0,50))
            
            submit_button = Button(Medium, text="Submit", font=body_font, command=lambda: submit(entry_box3))
            submit_button.grid(row=16, column=1, padx=(10,3), pady=(0,50))

            try_again_button = Button(Medium, text="Next", command=try_again, font=body_font)
            try_again_button.grid(row=16, column=4, sticky=W, padx=(200,600), pady=(0,0))

            try_again()
        answer()
        Medium.mainloop()             



#Hard window
    def Hard_window():
            def exit():
                Hard.destroy()

                
            Hard = Toplevel(ChooseLevel)
            Hard.title("Hard level")
            Hard.geometry("1000x450")
            Hard.configure(bg = 'aquamarine4')

            color3 = 'aquamarine4'
            body_font = ('Verdana', 10)
            
            Label(Hard, text=entry_box1.get(), bg=color3, font=body_font).grid(row=1, column=3, padx=(250,5), pady=(0,0))
            Button(Hard, text="Quit", command=exit, font=body_font).grid(row=0, column=4, sticky=W, padx=(30,600), pady=(0,0))

            question_num = IntVar(value=0)
            
            def update_question_num():
                if question_num.get() < 5:
                    question_num.set(question_num.get()+1)

            question_num_label = Label(Hard, textvariable=question_num, bg=color3, font=body_font)
            question_num_label.grid(row=3, column=2)

            Label(Hard, text="Question n.o:", bg=color3, font=body_font).grid(row=3, column=1) #padx=(100, 200), pady=(12,0))
            Label(Hard, text="L3:Hard", bg=color3, font=body_font).grid(row=3, column=4, padx=(30,900), pady=(0,1))

            num = [1, 2, 3, 4, 5, 6, 7, 8, 9]

            def submit(var1):
                body_font = ('Verdana', 10)
                colour1= 'red'
                colour2= 'green'
                
                if var1.get() == str(result()):
                    correct = Label(Hard, text="Correct!", font=body_font, bg=colour2)
                    correct.place(relx=0.5, rely=0.2)
                    start_game()
                else:
                    wrong = Label(Hard, text="Wrong!", font=body_font, bg=colour1)
                    wrong.place(relx=0.5, rely=0.2)
                    entry_box3.delete(0, "end")

                
            def try_again():#stop after 5 questions
                if question_num.get() >=5:
                    complete_window()
                    Medium.destroy()
                    return
                    
                
                body_font = ('Verdana', 10)
                try_again.num1update = random.choice(num)
                try_again.num2update = random.choice(num)
                try_again.operation = random.choice([ '/', '+', '-', '*'])

               
                if try_again.operation == '/':
                    if try_again.num2update == 0:
                        try_again.num2update = random.choice([x for x in num if x != 0])
                    try_again.num1update *= try_again.num2update
                    question.config(text=f"You have {try_again.num1update} candies, and you want to give {try_again.num2update} candies to each friend. How many friends can you give candies to?")

                elif try_again.operation == '+':
                    question.config(text=f"Andy has {try_again.num1update} apples, and his friend gave him {try_again.num2update} more. How many apples does Andy have now?")

                elif try_again.operation == '-':
                    question.config(text=f"There are {try_again.num1update} lollies and {try_again.num2update} are eaten, how many are left?")
                   # question.config(text=f"{try_again.num1update} - {try_again.num2update}")

                elif try_again.operation == '*':
                    question.config(text=f"A garden has {try_again.num1update} rows of flowers, and each row has {try_again.num2update} flowers. How many flowers are there in total?")

                question.grid(row=8, column=3, padx=(10,3), pady=(0,50))
                space = Label(Hard, text="                 ", font=body_font, bg=color3)
                space.place(relx=0.5, rely=0.2)
                entry_box3.delete(0, "end")
                update_question_num()
                     
            
           
            def result():
                if try_again.operation == '*':
                    return try_again.num1update * try_again.num2update
                elif try_again.operation == '/':
                    return try_again.num1update // try_again.num2update
                elif try_again.operation == '+':
                    return try_again.num1update + try_again.num2update
                elif try_again.operation == '-':
                    return try_again.num1update - try_again.num2update
               

            def answer():
                global entry_box3, solving, question

                body_font = ('Verdana', 10)

                question = Label(Hard, text=" ", font=body_font, bg=color3)
                question.grid(row=8, column=3)
                

                entry_box3 = Entry(Hard)
                entry_box3.grid(row=14, column=3, padx=(5,5), pady=(0,50))
                
                submit_button = Button(Hard, text="Submit", font=body_font, command=lambda: submit(entry_box3))
                submit_button.grid(row=16, column=1, padx=(10,3), pady=(0,60))

                try_again_button = Button(Hard, text="Next", command=try_again, font=body_font)
                try_again_button.grid(row=16, column=4, sticky=W, padx=(30,600), pady=(0,0))

                
                try_again()
            answer()
            Hard.mainloop()  
    body_font = ('Verdana', 10)
    Button(ChooseLevel, text="Quit", command=exit, width=10, bg='light blue').grid(row=0, column=4, sticky=E, padx=(20,3), pady=(0,0))
    Label(ChooseLevel, text="Choose a level:", bg='cadet blue', fg='white', font=body_font).grid(row=1, column=3, padx=(50,10), pady=(5,10))
    Button(ChooseLevel, text="L1:Easy", command=Easy_window, bg='light blue', fg='cadet blue', font=body_font).grid(row=4, column=3, padx=(50,10), pady=(5,10))
    Button(ChooseLevel, text="L2:Medium", command=Medium_window, bg='light blue', fg='cadet blue', font=body_font).grid(row=5, column=3, padx=(50,10), pady=(5,10))
    Button(ChooseLevel, text="L3:Hard", command=Hard_window, bg='light blue', fg='cadet blue', font=body_font).grid(row=6, column=3, padx=(50,10), pady=(5,10))
  


 
def main():
    global main_window, entry_box1, error_label, entry_box4, error_label2
    main_window = Tk()
    main_window.title("System")
    main_window.configure(bg='honeydew2')
    body_font = ('Verdana', 10)

    #save to a data file

    
     
    Button(main_window, text="quit", command=quit, width=10, bg='azure2', font=body_font).grid(row=0, column=4, padx=(20,3), pady=(0,0))
    Label(main_window,  text="Hello", width=12, bg='honeydew2', font=body_font).grid(row=2, column=3, sticky=E, padx=(10,30), pady=(0,0))
    Label(main_window,  text="Welcome to the Math Quiz", bg='honeydew2', font=body_font).grid(row=4, column=3, padx=(10,5), pady=(0,0))

    error_label = Label(main_window, text=" ", bg="honeydew2", fg="red", font=body_font)
    error_label.grid(row=11, column=4, padx=(0,0), pady=(0,50))

    error_label2 = Label(main_window, text=" ", bg="honeydew2", fg="red", font=body_font)
    error_label2.grid(row=13, column=4, padx=(0,0), pady=(0,50))
         
                     
    Label(main_window, text="Enter username", bg='honeydew2', font=body_font).grid(row=10, column=3, padx=(10,3), pady=(30,0))
    Label(main_window, text="Enter password", bg='honeydew2', font=body_font).grid(row=12, column=3, padx=(10,3), pady=(0,0))
    Button(main_window, text="Start", command=ChooseLevelWindow, bg='azure2', font=body_font).grid(row=14, column=3, padx=(10,5), pady=(0,0))
    Label(main_window, text="by XYZ", bg='honeydew2', font=body_font).grid(row=5, column=3, padx=(10,5), pady=(0,0))

    entry_box1 = Entry(main_window)
    entry_box1.grid(row=11, column=3, padx=(10,0), pady=(0,30))

    entry_box4 = Entry(main_window, show="*")
    entry_box4.grid(row=13, column=3, padx=(10,0), pady=(10,30))


    
    



        
         
    main_window.mainloop()
main()
